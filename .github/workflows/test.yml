# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: myenv

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ping check to artifactory
        run: |
          ###Ping check to SAAS_MAIN
          USERNAME=${{ secrets.MAINJF_USERNAME }}
          API_KEY=${{ secrets.MAINJF_API }}
          ARTIFACTORY_URL=${{ vars.MAINJF_URL }}
          response=$(curl -s -o /dev/null -w "%{http_code}" -u "$USERNAME:$API_KEY" "${ARTIFACTORY_URL}artifactory/api/system/ping")
          [ "$response" -eq 200 ] && echo "main_status=success" >> $GITHUB_ENV || echo "main_status=fail" >> $GITHUB_ENV

          ###Ping check to SAAS_DR
         # DRUSERNAME=${{ secrets.DRJF_USERNAME }}
          #DRAPI_KEY=${{ secrets.DRJF_API }}
          #DRARTIFACTORY_URL=${{ vars.DRF_URL }}
          #responsedr=$(curl -s -o /dev/null -w "%{http_code}" -u "$DRUSERNAME:$DRAPI_KEY" "${DRARTIFACTORY_URL}artifactory/api/system/ping")
          #[ "$responsedr" -eq 200 ] && dr_status=success || dr_status=fail
 
      - name: Read variables from status.txt
        run: |
          while IFS='=' read -r key value; do
          echo "$key=$value" >> $GITHUB_ENV
          done < status.txt
          
      - name: Update status.yaml
        run: |
          epochNow=$(date +%s)
          canUpdateDRFromFile=$canUpdateDR
          echo "canUpdateDR $canUpdateDR"
          echo "canUpdateDRFromFile $canUpdateDRFromFile"
          if [ $main_status == "success" ] && [ ${canUpdateDRFromFile} == "true" ];then
            sed -i "s/canUpdateDR=.*/canUpdateDR=true/" status.txt
            sed -i "s/lastHeartBeatFromMain=.*/lastHeartBeatFromMain=$epochNow/" status.txt
            sed -i "s/requestDateTime=.*/requestDateTime=$epochNow/" status.txt
          else
            sed -i "s/canUpdateDR=.*/canUpdateDR=false/" status.txt
            sed -i "s/lastHeartBeatFromMain=.*/lastHeartBeatFromMain=/" status.txt
            sed -i "s/requestDateTime=.*/requestDateTime=/" status.txt
          fi
      - name: Commit changes
        run: |
          git config user.name "sumanthupar"
          git config user.email "sumanthupar@gmail.com"
          git add status.txt
          git commit -m "Update as per pipeline"
          git push


           
