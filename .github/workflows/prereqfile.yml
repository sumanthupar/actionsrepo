# This is a basic workflow to help you get started with Actions

name: Prereqcheck

# Controls when the workflow will run
on:
  workflow_dispatch: 
  # Triggers the workflow on push or pull request events but only for the "main" branch Running every 15min
#  push:
#    branches: [ "main" ]
#  schedule:
#    - cron: "*/15 * * * *" 
  
  # workflow_dispatch:

permissions:
  id-token: write
  contents: write
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: myenv

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      - name: read all the values from values.env and store it in Github env
        run: |          
          #Read from file values.env
          while IFS='=' read -r key value; do
          echo "$key=$value" >> $GITHUB_ENV
          done < values.env
 
      - name: Check jq and sed
        run: |
          which jq && jq --version
          which sed && sed --version

      - name: Ping check to artifactory
        run: |
          set +e
          ###Ping check to SAAS_DR
          DRARTIFACTORY_URL=${{ env.DRJF_URL }}
          responsedr=$(curl -s -o /dev/null -w "%{http_code}" "${DRARTIFACTORY_URL}artifactory/api/system/ping")
          [ $responsedr -eq 200 ] && echo "dr_status=success" >> $GITHUB_ENV || echo "dr_status=fail" >> $GITHUB_ENV
          
          ###Ping check to SAAS_MAIN
          ARTIFACTORY_URL=${{ env.MAINJF_URL }}
          response=$(curl -s -o /dev/null -w "%{http_code}" "${ARTIFACTORY_URL}artifactory/api/system/ping")
          [ $response -eq 200 ] && echo "main_status=success" >> $GITHUB_ENV || echo "main_status=fail" >> $GITHUB_ENV

        
      -  name: Setup JFrog CLI SAAS DR
         uses: jfrog/setup-jfrog-cli@v4
         env:  
           JF_URL: ${{ env.DRJF_URL }}
         with:
           oidc-provider-name: gitoidc
           custom-server-id: ${{ env.jpdDr }}
           version: ${{ env.JFCliVersion }}

      - name: Setup JFrog CLI for SAAS main
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli-main
        env:  
          JF_URL: ${{ env.MAINJF_URL }}
        with:
          oidc-provider-name: gitoidc
          custom-server-id: ${{ env.jpdMain }}
          version: ${{ env.JFCliVersion }}

      - name: jf health check to both instances
        run: |
          jf rt ping --server-id=$jpdMain
          jf rt ping --server-id=$jpdDr

      - name: print env
        run: |
          cat $GITHUB_ENV

      - name: Download file status.txt from repo
        run: |
          jf rt dl $automationRepo/status.txt . --server-id=$jpdDr


           
