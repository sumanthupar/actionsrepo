name: DR2Main

on:
  repository_dispatch:
    types: [trigger-my-workflow]
    
permissions:
  id-token: write
  contents: write
  
jobs:
  build:
    runs-on: ubuntu-latest
    environment: myenv
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: 'refs/heads/main'

      - name: Read all the values from values.env and status.txt and store it in Github env variable
        run: |          
          #Read from file values.env
          while IFS='=' read -r key value; do
          echo "$key=$value" >> $GITHUB_ENV
          done < values.env
          
      - name: Ping check to artifactory both main and dr
        run: |
          ##Setting below to avoid failing complete pipeline
          set +e
          ###Ping check to SAAS_MAIN
          ARTIFACTORY_URL=${{ env.MAINJF_URL }}
          response=$(curl -s -o /dev/null -w "%{http_code}" "${ARTIFACTORY_URL}artifactory/api/system/ping")
          [ "$response" -eq 200 ] && echo "main_status=success" >> $GITHUB_ENV || echo "main_status=fail" >> $GITHUB_ENV
          
          ###Ping check to SAAS_DR
          DRARTIFACTORY_URL=${{ env.DRJF_URL }}
          responsedr=$(curl -s -o /dev/null -w "%{http_code}" "${DRARTIFACTORY_URL}artifactory/api/system/ping")
          [ "$responsedr" -eq 200 ] && dr_status=success || dr_status=fail
 
      - name: Fail workflow if SAAS main is down
        run: |
          if [ "$main_status" == "fail" ];then
            echo "SAAS Main is down. Exiting"
            exit 1
          fi
        
      - name: Setup JFrog CLI for SAAS main
        uses: jfrog/setup-jfrog-cli@v4
        env:  
          JF_URL: ${{ env.MAINJF_URL }}
        with:
          oidc-provider-name: destgithub
          custom-server-id: ${{ env.jpdMain }}
          version: ${{ env.JFCliVersion }}

      -  name: Setup JFrog CLI SAAS DR
         uses: jfrog/setup-jfrog-cli@v4
         id: setup-cli-dr
         env:  
           JF_URL: ${{ env.DRJF_URL }}
         with:
           oidc-provider-name: sumgithub
           custom-server-id: ${{ env.jpdDr }}
           version: ${{ env.JFCliVersion }}
     
      - name: Download file status.txt from repo
        run: |
          jf rt dl $automationRepo/status.txt . --server-id=$jpdDr 

      - name: read all the values from status.txt and store it in Github env
        run: |
          #Read from file status.txt
          while IFS='=' read -r key value; do
          echo "$key=$value" >> $GITHUB_ENV
          done < status.txt
      - name: print configured JFrog CLIs details
        run: |
          jf c s
          
      - name: Download and install plugin proj-sync and repo-sync from DR artifactory
        run: |
          set +e
          export JFROG_CLI_PLUGINS_SERVER=$jpdMain
          export JFROG_CLI_PLUGINS_REPO=$automationRepo
          export JFROG_CLI_LOG_LEVEL=DEBUG
          sleep 1
          jf plugin install $cliPluginName@$cliPluginVersion
          sleep 1
          jf plugin install $projectPluginName@$projectPluginVersion
          
           

      - name: CreateUpdateProjects
        run: |
          export JFROG_CLI_LOG_LEVEL=DEBUG
          ~/.jfrog/plugins/proj-sync/bin/${projectPluginName} diff create $jpdDr $jpdMain

      - name: createLocalRepositories
        run: |
          for projName in $(curl -XGET -H "Authorization: Bearer ${{ steps.setup-cli-dr.outputs.oidc-token }}" "${DRJF_URL}access/api/v1/projects" -s | jq -r '.[].project_key')
          do
            jf $cliPluginName create local $jpdDr $jpdMain --project-key=$projName --dry-run=false --inventory=false
          done
          jf $cliPluginName create local $jpdDr $jpdMain  --dry-run=false --inventory=false

      - name: createRemoteRepositories
        run: |
          for projName in $(curl -XGET -H "Authorization: Bearer ${{ steps.setup-cli-dr.outputs.oidc-token }}" "${DRJF_URL}access/api/v1/projects" -s | jq -r '.[].project_key')
          do
                jf $cliPluginName create remote $jpdDr $jpdMain --project-key=$projName --dry-run=false --inventory=false
          done
          jf $cliPluginName create remote $jpdDr $jpdMain  --dry-run=false --inventory=false

      - name: createVirtualRepositories
        run: |
          for projName in $(curl -XGET -H "Authorization: Bearer ${{ steps.setup-cli-dr.outputs.oidc-token }}" "${DRJF_URL}access/api/v1/projects" -s | jq -r '.[].project_key')
          do
            jf $cliPluginName create virtual $jpdDr $jpdMain --project-key=$projName --dry-run=false --inventory=false
          done
          jf $cliPluginName create virtual $jpdDr $jpdMain  --dry-run=false --inventory=false

      - name: UpdateLocalRepositories
        run: |
          i=0
          N=50
          for projName in $(curl -XGET -H "Authorization: Bearer ${{ steps.setup-cli-dr.outputs.oidc-token }}" "${DRJF_URL}access/api/v1/projects" -s | jq -r '.[].project_key')
          do
                jf $cliPluginName update local $jpdDr $jpdMain --project-key=$projName --dry-run=false &
                i=`expr $i + 1`
                if [[ `expr $i % $N` == 0 ]]; then
                        wait
                fi
          done
          
      - name: UpdateRemoteRepositories
        run: |
          i=0
          N=50
          for projName in $(curl -XGET -H "Authorization: Bearer ${{ steps.setup-cli-dr.outputs.oidc-token }}" "${DRJF_URL}access/api/v1/projects" -s | jq -r '.[].project_key')
          do
                jf $cliPluginName update remote $jpdDr $jpdMain --project-key=$projName --dry-run=false &
                i=`expr $i + 1`
                if [[ `expr $i % $N` == 0 ]]; then
                        wait
                fi
          done

      - name: UpdateVirtualRepositories
        run: |
          i=0
          N=50
          for projName in $(curl -XGET -H "Authorization: Bearer ${{ steps.setup-cli-dr.outputs.oidc-token }}" "${DRJF_URL}access/api/v1/projects" -s | jq -r '.[].project_key')
          do
                jf $cliPluginName update virtual $jpdDr $jpdMain --project-key=$projName --dry-run=false &
                i=`expr $i + 1`
                if [[ `expr $i % $N` == 0 ]]; then
                        wait
                fi
          done
          
      - name: Update status.yaml
        run: |
          epochNow=$(date +%s)
          if [ "$main_status" == "success" ];then
            sed -i "s/canUpdateDR=.*/canUpdateDR=true/" status.txt
            sed -i "s/lastHeartBeatFromMain=.*/lastHeartBeatFromMain=$epochNow/" status.txt
            sed -i "s/requestDateTime=.*/requestDateTime=$epochNow/" status.txt
          else
            sed -i "s/canUpdateDR=.*/canUpdateDR=false/" status.txt
            #sed -i "s/lastHeartBeatFromMain=.*/lastHeartBeatFromMain=/" status.txt
            sed -i "s/requestDateTime=.*/requestDateTime=$epochNow/" status.txt
          fi
          
      - name: Upload updated file status.txt from local to Artifactory Repo
        run: |
          jf rt u status.txt $automationRepo/ --server-id=$jpdDr
